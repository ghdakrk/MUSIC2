import numpy as np
from scipy.io.wavfile import write
from scipy import signal
import os

samplerate = 44100 #Frequecy in Hz

def get_sawwave(chords, duration=0.5):
    '''
    Function takes the "frequecy" and "time_duration" for a wave 
    as the input and returns a "numpy array" of values at all points 
    in time
    '''
    
    amplitude = 4096
    t = np.linspace(0, duration, int(samplerate * duration))
    # wave = amplitude * (np.sin(2 * np.pi * freq * t) + np.cos(2 * np.pi * freq * t))
    # wave = signal.sawtooth(np.sin(2 * np.pi * freq * t))
    wave = 0
    for i in chords:
        wave += amplitude * signal.sawtooth(np.sin(2 * np.pi * i * t))
    return wave

samplerate = 44100 #Frequecy in Hz

def get_sinewave(chords, duration=0.5):
    '''
    Function takes the "frequecy" and "time_duration" for a wave 
    as the input and returns a "numpy array" of values at all points 
    in time
    '''
    
    amplitude = 4096
    t = np.linspace(0, duration, int(samplerate * duration))
    wave = 0
    for i in chords:
        wave += amplitude * (np.sin(2 * np.pi * i * t))
    # wave = signal.sawtooth(np.sin(2 * np.pi * freq * t))
    # wave = amplitude * signal.sawtooth(np.sin(2 * np.pi * freq * t))
    return wave



  def get_piano_notes():
      '''
      Returns a dict object for all the piano 
      note's frequencies
      '''
      # White keys are in Uppercase and black keys (sharps) are in lowercase
      octave2 = ['C1', 'C1#', 'D1', 'D1#', 'E1', 'F1', 'F1#', 'G1', 'G1#', 'A1', 'A1#', 'B1'] 
      base_freq = 523.25 / 4 #Frequency of Note C4
      
      note_freqs = {octave2[i]: base_freq * pow(2,(i/12)) for i in range(len(octave2))}        
      note_freqs[''] = 0.0 # silent note
      note_freqs['D1b'] = note_freqs['D1#']
      note_freqs['E1b'] = note_freqs['D1#']
      note_freqs['G1b'] = note_freqs['F1#']
      note_freqs['A1b'] = note_freqs['G1#']
      note_freqs['B1b'] = note_freqs['A1#']

      note_freqs2 = {}
      for i in range(18):
        note_freqs2[f"{list(note_freqs.keys())[i][:-1]}2"] = list(np.array(list(note_freqs.values()))*2)[i]

      note_freqs3 = {}
      for i in range(18):
        note_freqs3[f"{list(note_freqs.keys())[i][:-1]}3"] = list(np.array(list(note_freqs.values()))*4)[i]
      
      note_freqs.update(note_freqs2)
      note_freqs.update(note_freqs3)

      return note_freqs
    
    # To get the piano note's frequencies
  note_freqs2 = get_piano_notes()
  note_freqs2.items()


def get_freq(input_note):
    ls = input_note.split("-")
    freqs = []
    note_freqs = get_piano_notes() # Function that we made earlier

    for i in ls:
        freqs.append(note_freqs[i])
    return freqs

def get_song_data(music_notes, durations):

    song = []
    for i, note in enumerate(music_notes):
        song.append(get_sawwave(note, duration=durations[i]))
    song = np.concatenate(song)
    return song

music_notes = [('B1',0.15), ('',0.1), ('B1',0.15), ('B2',0.3),
                ('D1',0.15), ('',0.1), ('D1',0.15), ('A2',0.3),
                ('F2',0.15), ('E1',0.1), ('F1',0.15), ('F2',0.3),
                ]
music_note = [get_freq(note[0]) for note in music_notes]
durations = [note[1] for note in music_notes]

data_saw = get_song_data(music_note, durations)

data_saw = data_saw * (16300/np.max(data_saw)) # Adjusting the Amplitude (Optional)


write('test.wav', samplerate, data_saw.astype(np.int16))
# play wav file
os.system("test.wav")